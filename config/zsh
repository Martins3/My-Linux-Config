if [[ -d $HOME/.nix-profile/bin ]];then
  # 如果在 fedora 中安装 nix ，需要首先加载环境变量
  if [ -e $HOME/.nix-profile/etc/profile.d/nix.sh ]; then . $HOME/.nix-profile/etc/profile.d/nix.sh; fi # added by Nix installer

  eval "$(direnv hook zsh)"

  function en_direnv() {
    echo "use nix" >> .envrc && direnv allow
  }
  export NIX_CONF_DIR=$HOME/.config/nixpkgs/nix
fi


eval "$(zoxide init zsh)"

export ATUIN_NOBIND="true"
eval "$(atuin init zsh)"

bindkey '^r' _atuin_search_widget
# eval "$(atuin init zsh --disable-up-arrow)"
# eval "$(mcfly init zsh)"
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=5'
export PATH="$HOME/.npm-packages/bin:$PATH"
export PATH="$HOME/.cargo/bin:$PATH"
export PATH="$HOME/.local/bin:$PATH"
export PATH="$HOME/go/bin:$PATH"

# ocaml 的包管理器是 opam ，为了给他一个依赖环境
[[ ! -r $HOME/.opam/opam-init/init.zsh ]] || source $HOME/.opam/opam-init/init.zsh  > /dev/null 2> /dev/null

# 参考 https://gist.github.com/iansu/1ad9fc5db90aafbf14ce58e99d5940ef
# prompt 中通过不同的 emoji 来标识架构
if [[ -f ~/core/id ]]; then
  export SHELL_ARCH=$(cat ~/core/id)
else

  if [[ "$(uname)" == "Darwin" ]]; then
    export SHELL_ARCH="🐶"
  elif grep "GenuineIntel" /proc/cpuinfo >/dev/null; then
    export SHELL_ARCH="🐙"
  elif grep "AuthenticAMD" /proc/cpuinfo >/dev/null; then
    export SHELL_ARCH="🐉"
  else
    export SHELL_ARCH="ARM"
  fi
fi
eval "$(starship init zsh)"


# https://www.reddit.com/r/zellij/comments/10skez0/does_zellij_support_changing_tabs_name_according/
# rename zellij tab automatically
zellij_tab_name_update() {
    if [[ -n $ZELLIJ ]]; then
        local current_dir=$PWD
        if [[ $current_dir == $HOME ]]; then
            current_dir="~"
        else
            current_dir=${current_dir##*/}
        fi
        command nohup zellij action rename-tab $current_dir >/dev/null 2>&1
    fi
}

zellij_tab_name_update
chpwd_functions+=(zellij_tab_name_update)

function zj() {
	if [[ -n $ZELLIJ ]]; then
		if [[ $# -ne 1 ]]; then
			echo "usage: zj name"
			exit 1
		fi
		dirname="/tmp/martins3/$1"
		mkdir -p "$dirname"
		cd "$dirname"
		nohup zellij action rename-tab "$1" >/dev/null 2>&1
	fi
}

alias px="proxychains4 -f $HOME/.dotfiles/config/proxychain.conf"


# 自动打开工作区
alias b="$HOME/.dotfiles/config/sh/tmux.sh && exit"
alias c="clear"
alias git_ignore="echo \$(git status --porcelain | grep '^??' | cut -c4-) > .gitignore"
alias gs="tig status"
alias gg="gitui --watcher"
alias kernel_version="git describe --contains"
# https://unix.stackexchange.com/questions/45120/given-a-git-commit-hash-how-to-find-out-which-kernel-release-contains-it
alias ls="eza"
# alias ls="eza --icons"
# 不知道为什么 --icons 会让自动补全消失了
alias l="ls -lah --icons"
alias im="ibus engine rime"
alias q="exit"
alias v="mkdir -p /tmp/martins3/nvim/ && nvim --listen /tmp/martins3/nvim/$(uuidgen)"
alias vs="$HOME/.dotfiles/config/sh/close-nvim.sh"
alias vc="rm -r ~/.local/share/nvim/sessions"
alias vc='echo "nvim-tree bug is not fixed ?"'
alias he="nvim +10000 $HOME/.dotfiles/sheet.md"
alias kvm_stat="sudo $HOME/data/linux/tools/kvm/kvm_stat/kvm_stat"
alias i="ipython"
# alias f="xclip -o >> /home/martins3/core/vn/fun.md && echo '' >> /home/martins3/core/vn/fun.md && cat /home/martins3/core/vn/fun.md"
alias cloc="tokei . -f --sort lines"
alias static="nix-shell -p gcc glibc.static --command zsh"
alias wez=$HOME/.dotfiles/config/sh/wez-opacity.sh
alias hz="viddy 'cat /proc/cpuinfo | grep MHz'"
alias ins="$HOME/.dotfiles/scripts/nix/env/install.sh"
alias xx="sudo shutdown now"
alias tm="tmux attach || tmux"
function config_repo(){
  git config user.name martins3
  git config user.email hubachelar@gmail.com
}
function check(){
	cd ~/data/linux-upstream/
	tig --author="$*"
}
alias weather="curl wttr.in/beijin"
alias drop_cache="echo 3 | sudo tee /proc/sys/vm/drop_caches"
alias wifi="nmcli dev wifi show-password"

# TODO 我理解应该可以通过 default.nix 自动实现 source .venv/bin/activate
function p(){
  if [[ ! -d .venv ]]; then
    python3 -m venv .venv
  fi
   source .venv/bin/activate
}

export NIXPKGS_ALLOW_INSECURE=1
export EDITOR=nvim
export PATH=$PATH:/usr/share/bcc/tools

if [ -e $HOME/core/vn/code/zsh  ]; then
  . $HOME/core/vn/code/zsh
fi
